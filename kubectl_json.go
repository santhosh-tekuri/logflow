// Code generated by jsonc; DO NOT EDIT.

package main

import "github.com/santhosh-tekuri/json"

func (p *pod) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("pod", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("metadata"):
			err = json.DecodeObj("pod.Metadata", de, func(de json.Decoder, prop json.Token) (err error) {
				switch {
				case prop.Eq("labels"):
					p.Metadata.Labels = make(map[string]interface{})
					err = json.DecodeObj("pod.Metadata.Labels", de, func(de json.Decoder, prop json.Token) (err error) {
						k, _ := prop.String("")
						v, err := de.Decode()
						p.Metadata.Labels[k] = v
						return err
					})
				case prop.Eq("annotations"):
					p.Metadata.Annotations = make(map[string]string)
					err = json.DecodeObj("pod.Metadata.Annotations", de, func(de json.Decoder, prop json.Token) (err error) {
						k, _ := prop.String("")
						v, err := de.Token().String("pod.Metadata.Annotations{}")
						p.Metadata.Annotations[k] = v
						return err
					})
				default:
					err = de.Skip()
				}
				return
			})
		case prop.Eq("spec"):
			err = json.DecodeObj("pod.Spec", de, func(de json.Decoder, prop json.Token) (err error) {
				switch {
				case prop.Eq("nodeName"):
					if val := de.Token(); !val.Null() {
						p.Spec.NodeName, err = val.String("pod.Spec.NodeName")
					}
				default:
					err = de.Skip()
				}
				return
			})

		default:
			err = de.Skip()
		}
		return
	})
}
