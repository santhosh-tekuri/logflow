// Code generated by jsonc; DO NOT EDIT.

package kubectl

import "github.com/santhosh-tekuri/json"

func (p *Pod) Unmarshal(de json.Decoder) error {
	return json.UnmarshalObj("Pod", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("metadata"):
			p.Metadata = struct {
				Labels      map[string]string `json:"labels"`
				Annotations map[string]string `json:"annotations"`
			}{}
			err = json.UnmarshalObj("Pod.Metadata", de, func(de json.Decoder, prop json.Token) (err error) {
				switch {
				case prop.Eq("labels"):
					p.Metadata.Labels = make(map[string]string)
					err = json.UnmarshalObj("Pod.Metadata.Labels", de, func(de json.Decoder, prop json.Token) (err error) {
						k, _ := prop.String("")
						v, err := de.Token().String("Pod.Metadata.Labels{}")
						p.Metadata.Labels[k] = v
						return err
					})
				case prop.Eq("annotations"):
					p.Metadata.Annotations = make(map[string]string)
					err = json.UnmarshalObj("Pod.Metadata.Annotations", de, func(de json.Decoder, prop json.Token) (err error) {
						k, _ := prop.String("")
						v, err := de.Token().String("Pod.Metadata.Annotations{}")
						p.Metadata.Annotations[k] = v
						return err
					})
				default:
					err = de.Skip()
				}
				return
			})
		case prop.Eq("spec"):
			p.Spec = struct {
				NodeName string `json:"nodeName"`
			}{}
			err = json.UnmarshalObj("Pod.Spec", de, func(de json.Decoder, prop json.Token) (err error) {
				switch {
				case prop.Eq("nodeName"):
					p.Spec.NodeName, err = de.Token().String("Pod.Spec.NodeName")
				default:
					err = de.Skip()
				}
				return
			})

		default:
			err = de.Skip()
		}
		return
	})
}
